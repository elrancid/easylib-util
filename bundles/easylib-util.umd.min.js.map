{"version":3,"sources":["../../../projects/easylib/util/src/lib/util.ts"],"names":["Util","toNumber","value","num","isNaN","toString","moment","format","copyObject","obj","Object","assign","cloneDeep","JSON","parse","stringify","isEqual","value1","value2","isString","isObject","isArray"],"mappings":"yqBAGA,SAAAA,YAOSA,EAAAC,SAAP,SAAgBC,GAEd,IAAKA,EACH,OAAO,KAET,IAAMC,GAAOD,EACb,MAAc,KAAVA,GAAgBE,MAAMD,GACjB,KAEFA,GAQFH,EAAAK,SAAP,SAAgBH,GACd,OAAIA,MAAAA,GAA2D,iBAAVA,GAAsBE,MAAMF,GACxE,KAELA,aAAiBI,EACZA,EAAOJ,GAAOK,OAAO,cAGvBL,EAAMG,YAORL,EAAAQ,WAAP,SAAkBC,GAIhB,OAAAC,OAAAC,OAAA,GAAYF,IAOPT,EAAAY,UAAP,SAAiBV,GACf,OAAOW,KAAKC,MAAMD,KAAKE,UAAUb,KAI5BF,EAAAgB,QAAP,SAAeC,EAAaC,GAC1B,OAAOL,KAAKE,UAAUE,KAAYJ,KAAKE,UAAUG,IAW5ClB,EAAAmB,SAAP,SAAgBjB,GACd,OAAOiB,EAAAA,SAASjB,IASXF,EAAAoB,SAAP,SAAgBlB,GACd,OAAOkB,EAAAA,SAASlB,IAQXF,EAAAqB,QAAP,SAAenB,GACb,OAAOmB,EAAAA,QAAQnB","sourcesContent":["import * as moment from 'moment';\nimport { isString, isObject, isArray } from 'lodash-es';\n\nexport class Util {\n\n  /**\n   * Parse value to number.\n   * @param value String value\n   * @return Number value, null if fails.\n   */\n  static toNumber(value: any): number|null {\n    // https://flaviocopes.com/how-to-convert-string-to-number-javascript/\n    if (!value) {\n      return null;\n    }\n    const num = +value;\n    if (value === '' || isNaN(num)) {\n      return null;\n    }\n    return num;\n  }\n\n  /**\n   * Parse value to string.\n   * @param value Number value\n   * @return String value, null if fails.\n   */\n  static toString(value: any): string|null {\n    if (value === undefined || value === null || (typeof value === 'number' && isNaN(value))) {\n      return null;\n    }\n    if (value instanceof moment) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n    // https://stackoverflow.com/questions/5765398/whats-the-best-way-to-convert-a-number-to-a-string-in-javascript\n    return value.toString();\n  }\n\n  /**\n   * Copy object with Object.assign\n   * @param value the object to clone\n   */\n  static copyObject(obj: object): object {\n    // const newObj = {};\n    // Object.assign(newObj, obj);\n    // return newObj;\n    return { ...obj };\n  }\n\n  /**\n   * Clone deep an object or array\n   * @param value the object to clone\n   */\n  static cloneDeep(value: any): any {\n    return JSON.parse(JSON.stringify(value));\n    // return cloneDeep(value);\n  }\n\n  static isEqual(value1: any, value2: any): boolean {\n    return JSON.stringify(value1) === JSON.stringify(value2);\n    // return _.isEqual(value1, value2);\n  }\n\n  // ********************************* FROM LODASH *****************************\n\n  /**\n   * Checks if value is classified as a String primitive or object.\n   * @param value — The value to check.\n   * @return — Returns true if value is correctly classified, else false.\n   */\n  static isString(value?: any): value is string {\n    return isString(value);\n  }\n\n  /**\n   * Checks if value is the language type of Object. (e.g. arrays, functions,\n   * objects, regexes, new Number(0), and new String(''))\n   * @param value — The value to check.\n   * @return — Returns true if value is an object, else false.\n   */\n  static isObject(value?: any): value is object {\n    return isObject(value);\n  }\n\n  /**\n   * Checks if value is classified as an Array object.\n   * @param value — The value to check.\n   * @return — Returns true if value is correctly classified, else false.\n   */\n  static isArray(value?: any): value is object {\n    return isArray(value);\n  }\n}\n"]}